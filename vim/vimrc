" Install vim-plug if it's not installed already
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Syntax
Plug 'tpope/vim-git'

Plug 'vim-ruby/vim-ruby'

Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'tpope/vim-haml' " haml also does Sass and SCSS

Plug 'chrisbra/csv.vim'
Plug 'leshill/vim-json'

Plug 'tpope/vim-markdown'

Plug 'andersoncustodio/vim-tmux'

Plug 'fatih/vim-go'

Plug 'Zaptic/elm-vim'

" JVM things
Plug 'tpope/vim-classpath'
Plug 'tpope/vim-fireplace'
Plug 'venantius/vim-cljfmt'

" Config management
Plug 'google/vim-jsonnet'
Plug 'cespare/vim-toml'
Plug 'ekalinin/Dockerfile.vim'
Plug 'hashivim/vim-terraform'

Plug 'neomake/neomake' " async linting

" Colour
Plug 'danielwe/base16-vim'
Plug 'bling/vim-airline'
Plug 'ap/vim-css-color' " show css colours in the editor

" Completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Utilities
Plug 'tpope/vim-endwise'                                          " Adds ends helpfully
Plug 'tpope/vim-surround'                                         " Change/remove surrounding things
Plug 'tpope/vim-repeat'                                           " Make vim-surround work with .
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }               " Fuzzy finding
Plug 'junegunn/fzf.vim'                                           " Fuzzy finding for things within vim
Plug 'christoomey/vim-tmux-navigator'                             " Navigation across vim and tmux splits
Plug 'tpope/vim-eunuch'                                           " Vim wrappers for file changing
Plug 'editorconfig/editorconfig-vim'                              " Apply .editorconfig
Plug 'tpope/vim-commentary'                                       " Commenting out things
Plug 'tpope/vim-fugitive'                                         " Git things
Plug 'tpope/vim-rhubarb'                                          " Open git things in github
Plug 'kana/vim-textobj-user'                                      " Helps with defining custom text blocks
Plug 'nelstrom/vim-textobj-rubyblock'                             " Binds 'ar' to around a Ruby block, 'ir' to inside
Plug 'wellle/targets.vim'                                         " More text objects
Plug 'ahw/vim-pbcopy'                                             " Sends stuff to OS X clipboard via 'cy'
Plug 'AndrewRadev/splitjoin.vim'                                  " Split (gS) and join (gJ) blocks
Plug 'tmux-plugins/vim-tmux-focus-events'                         " Make vim listen to tmux focus events
Plug 'junegunn/vim-easy-align'                                    " Align things incredibly
Plug 'airblade/vim-rooter'

" Typescript autoimport magic
Plug 'neovim/nvim-lspconfig'
Plug 'jose-elias-alvarez/nvim-lsp-ts-utils'
Plug 'jose-elias-alvarez/null-ls.nvim'
Plug 'nvim-lua/plenary.nvim'

call plug#end()

" Lua script for Typescript autoimporting
" Import lua configuration for LSP
lua require("lsp-config")
" Add missing imports with leader + i
nnoremap <Leader>i :TSLspImportAll <cr>

syntax on
filetype plugin indent on
set re=1 " Use a newer regexp engine

" status bar
set laststatus=2                        " Always show a statusline
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_section_warning = ''
let g:airline#extensions#tabline#enabled = 0

" Elm setup
let g:elm_jump_to_error = 0
let g:elm_make_output_file = "/dev/null"
let g:elm_make_show_warnings = 0
let g:elm_syntastic_show_warnings = 0
let g:elm_browser_command = ""
let g:elm_detailed_complete = 0
let g:elm_format_autosave = 1
let g:elm_format_fail_silently = 0
let g:elm_setup_keybindings = 1

" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault

" Auto-read files when switching back into vim
set autoread

" fix slight delay after pressing ESC then O
" http://ksjoberg.com/vim-esckeys.html
" set noesckeys
set timeout timeoutlen=500 ttimeoutlen=100

" fold with space, but don't autofold when opening
set foldmethod=indent
set foldlevelstart=999
nnoremap <Space> za

" Use jj for getting out of insert mode
inoremap jj <esc>

set history=100

set textwidth=80
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent " Copy indent from current line when starting a new one


set spelllang=en_gb
syntax spell toplevel

" Markdown settings
autocmd BufRead,BufNewFile *.md set ft=markdown
autocmd FileType markdown setlocal shiftwidth=4 softtabstop=4 tabstop=4 wrap linebreak nolist wrap lbr colorcolumn=0

" Ruby syntax highlighting is slower with the newer engine
autocmd BufRead,BufNewFile Gemfile set ft=ruby
autocmd FileType ruby setlocal regexpengine=1

" Don't expand tabs in Go or Make
autocmd FileType make,go set noexpandtab
autocmd BufRead,BufNewFile Make.*,Makefile,makefile set ft=make

set linebreak

set incsearch " Show where the pattern, while typying a search command
set hlsearch  " Highlight all matches of a search pattern
set ignorecase smartcase " Only do case-sensitive searches when search includes an uppercase letter

set scrolloff=10

set nobackup
set nowritebackup
set noswapfile

set backspace=indent,eol,start

set wildmode=full
set wildmenu
set wildignore+=*.o,*.obj,.git,node_modules,_site,*.class,*.zip,*.aux

let mapleader=","
noremap \ ,

" Show line numbers, and make them relative to the current cursor
set number
set relativenumber

" pretty colours
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

set colorcolumn=100

set list listchars=tab:»·,trail:·

command! Q q
command! WQ wq
command! Wq wq

set splitbelow
set splitright

autocmd BufRead * set tags=./tags,tags;$HOME " Look for tags when opening a file

set lazyredraw

" ~~~ MAPPINGS BELOW ~~~

"gtfo ex mode
map Q <Nop>

map <Leader>nf :e <C-R>=expand("%:p:h") . "/" <CR>

" FZF commands
nnoremap <leader>t :Files<cr>
nnoremap <leader>b :Buffers<cr>
imap <C-x><C-l> <Plug>(fzf-complete-line)
nmap <leader>d :call fzf#run({'source': 'find . -type d \| sed "s\|^\./\|\|"', 'sink': 'e', 'down': '30%', 'options': '--preview "ls {}"', 'window': '10split enew'})<CR>

" Splits
nnoremap <leader>v :vsplit<CR>
nnoremap <leader>s :split<CR>

vnoremap . :norm.<CR>

" Paste from system clipboard
nmap <leader>P :read !pbpaste <CR>

" Search using silversurfer (ag) for word under cursor
nnoremap <Leader>a :Ag <C-r><C-w><CR>


" Don't add the comment prefix when I hit enter or o/O on a comment line.
autocmd FileType * setlocal formatoptions-=r formatoptions-=o

nnoremap <CR> :noh<CR><CR>

" http://robots.thoughtbot.com/faster-grepping-in-vim/
set grepprg=ag\ --nogroup\ --nocolor

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" stolen from https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc
" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

noremap H ^
noremap L $
vnoremap L g_

" Uppercase word mapping.
"
" This mapping allows you to press <c-u> in insert mode to convert the current
" word to uppercase.  It's handy when you're writing names of constants and
" don't want to use Capslock.
"
" To use it you type the name of the constant in lowercase.  While your
" cursor is at the end of the word, press <c-u> to uppercase it, and then
" continue happily on your way:
inoremap <C-u> <esc>mzgUiw`za

"makes fzf never use tmux
"https://github.com/junegunn/fzf.vim/issues/66#issuecomment-169362556
let g:fzf_layout = {}

" reset cursor position on files, if it's remembered
" but don't do it for gitcommit file types
autocmd BufReadPost * if &filetype != "gitcommit" && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" --------------- Neomake (nvim Syntastic) Config -----------------------------

autocmd! BufWritePost * Neomake

" Disable extended unicode symbols as the error message, as this plays badly
" with kitty
" let g:neomake_warning_sign={'text': 'x'}
" let g:neomake_error_sign={'text': 'x'}

let g:terraform_fmt_on_save = 1
let g:neomake_sh_enabled_makers = ['shellcheck']
let g:neomake_zsh_enabled_makers = []
let g:neomake_rust_enabled_makers = ['rustc']
let g:neomake_go_enabled_makers = ['go']
let g:neomake_ruby_enabled_makers = ['bundle', 'mri']
let g:neomake_ruby_bundle_maker = {
    \ 'args': ['--format', 'emacs'],
    \ 'errorformat': '%f:%l:%c: %t: %m',
    \ 'postprocess': function('neomake#makers#ft#ruby#RubocopEntryProcess')
    \ }

" Prevent save from lagging with default syntastic+vim-go combinations
let g:syntastic_go_checkers = ['golint', 'govet']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

" --------------- coc.nvim ----------------------------------------------------

" Coc configuration, install if not there:
let g:coc_global_extensions = [
      \'coc-eslint',
      \'coc-go',
      \'coc-json',
      \'coc-prettier',
      \'coc-tsserver',
      \]

" Alias commands. Probably won't use this, but useful as an example:
command! -nargs=0 Prettier :CocCommand prettier.formatFile
command! -nargs=0 ESlint :CocCommand eslint.formatFile

" ---------------coc.nvim -----------------------------------------------------

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Make enter actively confirm the autocomplete, which means coc-tsserver will do
" the autoimport
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" --------------- Golang Preferences ------------------------------------------

" This used to be goimports, but that became really slow for a save hook
" Re-enabling now I've cleaned up my gopath. Uncomment if things get slow again.
" let g:go_fmt_command = "goimports"
let g:go_list_type = "quickfix"


" --------------- Tmux Integration --------------------------------------------

if $TMUX != ''

  " Integrate movement between tmux/vim panes/windows
  function! TmuxMove(direction)

    " Check if we are currently focusing on a edge window.
    " To achieve that, move to/from the requested window and see if the window
    " number changed

    let old_window = winnr()
    exe 'wincmd ' . a:direction
    let new_window = winnr()

    " Change back to original window
    exe old_window . 'wincmd w'

    if old_window == new_window
      " The focused window is at an edge, so ask tmux to switch panes
      if a:direction == 'j'
        call system("tmux select-pane -D")
      elseif a:direction == 'k'
        call system("tmux select-pane -U")
      elseif a:direction == 'h'
        call system("tmux select-pane -L")
      elseif a:direction == 'l'
        call system("tmux select-pane -R")
      endif
    else
      exe 'wincmd ' . a:direction
    end
  endfun

else

  nmap <C-h> :exe 'wincmd h'<CR>
  nmap <C-j> :exe 'wincmd j'<CR>
  nmap <C-k> :exe 'wincmd k'<CR>
  nmap <C-l> :exe 'wincmd l'<CR>

end
