# vim: set filetype=sh:

function g {
  if [[ $# -gt 0 ]]; then
    git "$@"
  else
    git status -sb
  fi
}

# Tab complete hosts from ~/.ssh/known_hosts
zstyle -e ':completion::*:hosts' hosts 'reply=($(sed -e "/^#/d" -e "s/ .*\$//" -e "s/,/ /g" /etc/ssh_known_hosts(N) ~/.ssh/known_hosts(N) 2>/dev/null | xargs) $(grep \^Host ~/.ssh/config(N) | cut -f2 -d\  2>/dev/null | xargs))'

function tnw() {
  tmux new-window -n "$2" -c "$HOME/$1/$2"
}

function tnwp() {
  tnw work "$1"
}

function plist() {
  pgrep -f "$1" | xargs ps
}

function gcob () {
  if [ $# -eq 0 ]; then
    # No args supplied - see if there's something on the clipboard
    local branch
    branch=$(pbpaste)
    if [[ $branch == isaac/* ]]; then
      gcob "$branch"
    else
      echo "Found '$branch' on clipboard, which doesn't look like a Linear branch name"
    fi
  else
    branch="$1"
    # Trim anything up to and including a /
    # e.g. isaac/eng-123-blah -> eng-123-blah
    branch=$(echo "$branch" | sed -e 's/[^\/]*\///')
    git checkout -b "$branch"
  fi
}

function wt() {
  if [[ $# -ne 2 ]]; then
    echo "Usage: wt <repo> <branch>"
    echo "  Manages git worktrees across ~/work and ~/me directories"
    echo "  Creates worktrees in ~/worktrees/<repo>-<branch>"
    echo "  Opens tmux window with optional claude launch"
    return 1
  fi

  local repo_name="$1"
  local branch_name="$2"
  local repo_path=""
  
  # Find the repo in either ~/work or ~/me
  if [[ -d "$HOME/work/$repo_name" ]]; then
    repo_path="$HOME/work/$repo_name"
  elif [[ -d "$HOME/me/$repo_name" ]]; then
    repo_path="$HOME/me/$repo_name"
  else
    echo "Error: Repository '$repo_name' not found in ~/work or ~/me"
    return 1
  fi

  # Verify it's a git repository
  if [[ ! -d "$repo_path/.git" ]]; then
    echo "Error: '$repo_path' is not a git repository"
    return 1
  fi

  # Change to the repo directory
  cd "$repo_path" || return 1

  # Ensure global worktrees directory exists
  local worktrees_dir="$HOME/worktrees"
  mkdir -p "$worktrees_dir"

  # Path for the worktree with repo name prefix
  local worktree_path="$worktrees_dir/${repo_name}-${branch_name}"

  # Check if worktree already exists
  if [[ -d "$worktree_path" ]]; then
    echo "Worktree already exists at $worktree_path"
  else
    # Check if branch exists locally
    if git show-ref --verify --quiet "refs/heads/$branch_name"; then
      echo "Creating worktree for existing local branch '$branch_name'"
      git worktree add "$worktree_path" "$branch_name"
    # Check if branch exists on remote
    elif git show-ref --verify --quiet "refs/remotes/origin/$branch_name"; then
      echo "Creating worktree for existing remote branch '$branch_name'"
      git worktree add "$worktree_path" "$branch_name"
    else
      echo "Creating new branch '$branch_name' from origin/master"
      # Fetch latest changes
      git fetch origin master
      # Create worktree with new branch from origin/master
      git worktree add -b "$branch_name" "$worktree_path" origin/master
    fi
  fi

  # Copy all .claude folders from main repo to worktree
  if [[ -d "$repo_path/.claude" ]]; then
    echo "Copying .claude folder to worktree"
    cp -r "$repo_path/.claude" "$worktree_path/"
  fi
  
  # Find and copy any additional .claude folders
  find "$repo_path" -name ".claude" -type d -maxdepth 3 | while read -r claude_dir; do
    # Skip the main .claude folder as we already copied it
    if [[ "$claude_dir" != "$repo_path/.claude" ]]; then
      local relative_path="${claude_dir#$repo_path/}"
      local target_dir="$worktree_path/$(dirname "$relative_path")"
      mkdir -p "$target_dir"
      echo "Copying $relative_path to worktree"
      cp -r "$claude_dir" "$target_dir/"
    fi
  done
  
  # Run mise trust in any directory with mise.toml
  find "$worktree_path" -name "mise.toml" -type f | while read -r mise_file; do
    local mise_dir="$(dirname "$mise_file")"
    local relative_dir="${mise_dir#$worktree_path/}"
    if [[ "$mise_dir" == "$worktree_path" ]]; then
      echo "Running mise trust in worktree root"
    else
      echo "Running mise trust in $relative_dir"
    fi
    (cd "$mise_dir" && mise trust 2>/dev/null || true)
  done

  # Create or switch to tmux window
  local window_name="${repo_name}-${branch_name}"
  
  # Check if we're in a tmux session
  if [[ -n "$TMUX" ]]; then
    # Check if window already exists
    if tmux list-windows -F "#{window_name}" | grep -q "^${window_name}$"; then
      echo "Switching to existing tmux window '$window_name'"
      tmux select-window -t "$window_name"
    else
      echo "Creating new tmux window '$window_name'"
      tmux new-window -n "$window_name" -c "$worktree_path"
      # Try to launch claude in the background, but don't block if it fails
      tmux send-keys -t "$window_name" "claude" C-m 2>/dev/null || true
    fi
  else
    echo "Not in tmux session. Starting new session with window '$window_name'"
    # Create new tmux session with the window
    tmux new-session -d -s "$window_name" -n "$window_name" -c "$worktree_path"
    # Try to launch claude
    tmux send-keys -t "$window_name" "claude" C-m 2>/dev/null || true
    # Attach to the session
    tmux attach-session -t "$window_name"
  fi
  
  echo "Worktree setup complete: $worktree_path"
}
